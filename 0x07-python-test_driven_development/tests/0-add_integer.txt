The add_integer Module Test Cases
=================================

The 0-add_integer module takes two integers or floats as arguments and returns their sum

Usage:
=====

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1,2)
    3
    >>> add_integer(1.0, 2.1)
    3
    >>> add_integer(0)
    98
    >>> add_integer(55, 24)
    79
    >>> add_integer(1)
    99
    >>> add_integer(.1)
    98
    >>> add_integer(-1, 1)
    0

    """ ERRORS """

    #pass if not int, a string
    >>> add_integer("Awino", 2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


    #pass in not int, a list
    >>> add_integer([0], {})
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


    #pass in a string for b
    >>> add_integer(5, "Erick")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer


    #pass in nothing
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


    #converting float infinities to int errors
    >>> add_integer(float('inf'), 2)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer


    #convertibg float NaN to int errors
    >>> add_integer(float('NaN'), 2)
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer
